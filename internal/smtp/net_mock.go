// Code generated by MockGen. DO NOT EDIT.
// Source: net.go
//
// Generated by this command:
//
//	mockgen -typed -source=net.go -destination=net_mock.go -package=smtp
//

// Package smtp is a generated GoMock package.
package smtp

import (
	smtp "net/smtp"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSMTPClient is a mock of SMTPClient interface.
type MockSMTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockSMTPClientMockRecorder
}

// MockSMTPClientMockRecorder is the mock recorder for MockSMTPClient.
type MockSMTPClientMockRecorder struct {
	mock *MockSMTPClient
}

// NewMockSMTPClient creates a new mock instance.
func NewMockSMTPClient(ctrl *gomock.Controller) *MockSMTPClient {
	mock := &MockSMTPClient{ctrl: ctrl}
	mock.recorder = &MockSMTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSMTPClient) EXPECT() *MockSMTPClientMockRecorder {
	return m.recorder
}

// SendMail mocks base method.
func (m *MockSMTPClient) SendMail(addr string, a smtp.Auth, from string, to []string, msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMail", addr, a, from, to, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMail indicates an expected call of SendMail.
func (mr *MockSMTPClientMockRecorder) SendMail(addr, a, from, to, msg any) *MockSMTPClientSendMailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMail", reflect.TypeOf((*MockSMTPClient)(nil).SendMail), addr, a, from, to, msg)
	return &MockSMTPClientSendMailCall{Call: call}
}

// MockSMTPClientSendMailCall wrap *gomock.Call
type MockSMTPClientSendMailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSMTPClientSendMailCall) Return(arg0 error) *MockSMTPClientSendMailCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSMTPClientSendMailCall) Do(f func(string, smtp.Auth, string, []string, []byte) error) *MockSMTPClientSendMailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSMTPClientSendMailCall) DoAndReturn(f func(string, smtp.Auth, string, []string, []byte) error) *MockSMTPClientSendMailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
