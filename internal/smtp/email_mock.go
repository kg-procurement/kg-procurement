// Code generated by MockGen. DO NOT EDIT.
// Source: email.go
//
// Generated by this command:
//
//	mockgen -typed -source=email.go -destination=email_mock.go -package=smtp
//

// Package smtp is a generated GoMock package.
package smtp

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEmailSender is a mock of EmailSender interface.
type MockEmailSender struct {
	ctrl     *gomock.Controller
	recorder *MockEmailSenderMockRecorder
}

// MockEmailSenderMockRecorder is the mock recorder for MockEmailSender.
type MockEmailSenderMockRecorder struct {
	mock *MockEmailSender
}

// NewMockEmailSender creates a new mock instance.
func NewMockEmailSender(ctrl *gomock.Controller) *MockEmailSender {
	mock := &MockEmailSender{ctrl: ctrl}
	mock.recorder = &MockEmailSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailSender) EXPECT() *MockEmailSenderMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockEmailSender) SendEmail(email Email) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockEmailSenderMockRecorder) SendEmail(email any) *MockEmailSenderSendEmailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockEmailSender)(nil).SendEmail), email)
	return &MockEmailSenderSendEmailCall{Call: call}
}

// MockEmailSenderSendEmailCall wrap *gomock.Call
type MockEmailSenderSendEmailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEmailSenderSendEmailCall) Return(arg0 error) *MockEmailSenderSendEmailCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEmailSenderSendEmailCall) Do(f func(Email) error) *MockEmailSenderSendEmailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEmailSenderSendEmailCall) DoAndReturn(f func(Email) error) *MockEmailSenderSendEmailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
