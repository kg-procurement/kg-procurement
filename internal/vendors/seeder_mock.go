// Code generated by MockGen. DO NOT EDIT.
// Source: seeder.go
//
// Generated by this command:
//
//	mockgen -typed -source=seeder.go -destination=seeder_mock.go -package=vendors
//

// Package vendors is a generated GoMock package.
package vendors

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockseederDataWriter is a mock of seederDataWriter interface.
type MockseederDataWriter struct {
	ctrl     *gomock.Controller
	recorder *MockseederDataWriterMockRecorder
}

// MockseederDataWriterMockRecorder is the mock recorder for MockseederDataWriter.
type MockseederDataWriterMockRecorder struct {
	mock *MockseederDataWriter
}

// NewMockseederDataWriter creates a new mock instance.
func NewMockseederDataWriter(ctrl *gomock.Controller) *MockseederDataWriter {
	mock := &MockseederDataWriter{ctrl: ctrl}
	mock.recorder = &MockseederDataWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockseederDataWriter) EXPECT() *MockseederDataWriterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockseederDataWriter) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockseederDataWriterMockRecorder) Close() *MockseederDataWriterCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockseederDataWriter)(nil).Close))
	return &MockseederDataWriterCloseCall{Call: call}
}

// MockseederDataWriterCloseCall wrap *gomock.Call
type MockseederDataWriterCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockseederDataWriterCloseCall) Return(arg0 error) *MockseederDataWriterCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockseederDataWriterCloseCall) Do(f func() error) *MockseederDataWriterCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockseederDataWriterCloseCall) DoAndReturn(f func() error) *MockseederDataWriterCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// writeVendor mocks base method.
func (m *MockseederDataWriter) writeVendor(ctx context.Context, vendor Vendor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "writeVendor", ctx, vendor)
	ret0, _ := ret[0].(error)
	return ret0
}

// writeVendor indicates an expected call of writeVendor.
func (mr *MockseederDataWriterMockRecorder) writeVendor(ctx, vendor any) *MockseederDataWriterwriteVendorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "writeVendor", reflect.TypeOf((*MockseederDataWriter)(nil).writeVendor), ctx, vendor)
	return &MockseederDataWriterwriteVendorCall{Call: call}
}

// MockseederDataWriterwriteVendorCall wrap *gomock.Call
type MockseederDataWriterwriteVendorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockseederDataWriterwriteVendorCall) Return(arg0 error) *MockseederDataWriterwriteVendorCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockseederDataWriterwriteVendorCall) Do(f func(context.Context, Vendor) error) *MockseederDataWriterwriteVendorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockseederDataWriterwriteVendorCall) DoAndReturn(f func(context.Context, Vendor) error) *MockseederDataWriterwriteVendorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
