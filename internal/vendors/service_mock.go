// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -typed -source=service.go -destination=service_mock.go -package=vendors
//

// Package vendors is a generated GoMock package.
package vendors

import (
	context "context"
	mailer "kg/procurement/internal/mailer"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockvendorDBAccessor is a mock of vendorDBAccessor interface.
type MockvendorDBAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockvendorDBAccessorMockRecorder
}

// MockvendorDBAccessorMockRecorder is the mock recorder for MockvendorDBAccessor.
type MockvendorDBAccessorMockRecorder struct {
	mock *MockvendorDBAccessor
}

// NewMockvendorDBAccessor creates a new mock instance.
func NewMockvendorDBAccessor(ctrl *gomock.Controller) *MockvendorDBAccessor {
	mock := &MockvendorDBAccessor{ctrl: ctrl}
	mock.recorder = &MockvendorDBAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockvendorDBAccessor) EXPECT() *MockvendorDBAccessorMockRecorder {
	return m.recorder
}

// BulkGetByIDs mocks base method.
func (m *MockvendorDBAccessor) BulkGetByIDs(arg0 context.Context, ids []string) ([]Vendor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkGetByIDs", arg0, ids)
	ret0, _ := ret[0].([]Vendor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkGetByIDs indicates an expected call of BulkGetByIDs.
func (mr *MockvendorDBAccessorMockRecorder) BulkGetByIDs(arg0, ids any) *MockvendorDBAccessorBulkGetByIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkGetByIDs", reflect.TypeOf((*MockvendorDBAccessor)(nil).BulkGetByIDs), arg0, ids)
	return &MockvendorDBAccessorBulkGetByIDsCall{Call: call}
}

// MockvendorDBAccessorBulkGetByIDsCall wrap *gomock.Call
type MockvendorDBAccessorBulkGetByIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockvendorDBAccessorBulkGetByIDsCall) Return(arg0 []Vendor, arg1 error) *MockvendorDBAccessorBulkGetByIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockvendorDBAccessorBulkGetByIDsCall) Do(f func(context.Context, []string) ([]Vendor, error)) *MockvendorDBAccessorBulkGetByIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockvendorDBAccessorBulkGetByIDsCall) DoAndReturn(f func(context.Context, []string) ([]Vendor, error)) *MockvendorDBAccessorBulkGetByIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BulkGetByProductName mocks base method.
func (m *MockvendorDBAccessor) BulkGetByProductName(arg0 context.Context, productName string) ([]Vendor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkGetByProductName", arg0, productName)
	ret0, _ := ret[0].([]Vendor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkGetByProductName indicates an expected call of BulkGetByProductName.
func (mr *MockvendorDBAccessorMockRecorder) BulkGetByProductName(arg0, productName any) *MockvendorDBAccessorBulkGetByProductNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkGetByProductName", reflect.TypeOf((*MockvendorDBAccessor)(nil).BulkGetByProductName), arg0, productName)
	return &MockvendorDBAccessorBulkGetByProductNameCall{Call: call}
}

// MockvendorDBAccessorBulkGetByProductNameCall wrap *gomock.Call
type MockvendorDBAccessorBulkGetByProductNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockvendorDBAccessorBulkGetByProductNameCall) Return(arg0 []Vendor, arg1 error) *MockvendorDBAccessorBulkGetByProductNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockvendorDBAccessorBulkGetByProductNameCall) Do(f func(context.Context, string) ([]Vendor, error)) *MockvendorDBAccessorBulkGetByProductNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockvendorDBAccessorBulkGetByProductNameCall) DoAndReturn(f func(context.Context, string) ([]Vendor, error)) *MockvendorDBAccessorBulkGetByProductNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateEvaluation mocks base method.
func (m *MockvendorDBAccessor) CreateEvaluation(ctx context.Context, evaluation *VendorEvaluation) (*VendorEvaluation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvaluation", ctx, evaluation)
	ret0, _ := ret[0].(*VendorEvaluation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvaluation indicates an expected call of CreateEvaluation.
func (mr *MockvendorDBAccessorMockRecorder) CreateEvaluation(ctx, evaluation any) *MockvendorDBAccessorCreateEvaluationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvaluation", reflect.TypeOf((*MockvendorDBAccessor)(nil).CreateEvaluation), ctx, evaluation)
	return &MockvendorDBAccessorCreateEvaluationCall{Call: call}
}

// MockvendorDBAccessorCreateEvaluationCall wrap *gomock.Call
type MockvendorDBAccessorCreateEvaluationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockvendorDBAccessorCreateEvaluationCall) Return(arg0 *VendorEvaluation, arg1 error) *MockvendorDBAccessorCreateEvaluationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockvendorDBAccessorCreateEvaluationCall) Do(f func(context.Context, *VendorEvaluation) (*VendorEvaluation, error)) *MockvendorDBAccessorCreateEvaluationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockvendorDBAccessorCreateEvaluationCall) DoAndReturn(f func(context.Context, *VendorEvaluation) (*VendorEvaluation, error)) *MockvendorDBAccessorCreateEvaluationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAll mocks base method.
func (m *MockvendorDBAccessor) GetAll(ctx context.Context, spec GetAllVendorSpec) (*AccessorGetAllPaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, spec)
	ret0, _ := ret[0].(*AccessorGetAllPaginationData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockvendorDBAccessorMockRecorder) GetAll(ctx, spec any) *MockvendorDBAccessorGetAllCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockvendorDBAccessor)(nil).GetAll), ctx, spec)
	return &MockvendorDBAccessorGetAllCall{Call: call}
}

// MockvendorDBAccessorGetAllCall wrap *gomock.Call
type MockvendorDBAccessorGetAllCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockvendorDBAccessorGetAllCall) Return(arg0 *AccessorGetAllPaginationData, arg1 error) *MockvendorDBAccessorGetAllCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockvendorDBAccessorGetAllCall) Do(f func(context.Context, GetAllVendorSpec) (*AccessorGetAllPaginationData, error)) *MockvendorDBAccessorGetAllCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockvendorDBAccessorGetAllCall) DoAndReturn(f func(context.Context, GetAllVendorSpec) (*AccessorGetAllPaginationData, error)) *MockvendorDBAccessorGetAllCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllLocations mocks base method.
func (m *MockvendorDBAccessor) GetAllLocations(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLocations", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllLocations indicates an expected call of GetAllLocations.
func (mr *MockvendorDBAccessorMockRecorder) GetAllLocations(ctx any) *MockvendorDBAccessorGetAllLocationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLocations", reflect.TypeOf((*MockvendorDBAccessor)(nil).GetAllLocations), ctx)
	return &MockvendorDBAccessorGetAllLocationsCall{Call: call}
}

// MockvendorDBAccessorGetAllLocationsCall wrap *gomock.Call
type MockvendorDBAccessorGetAllLocationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockvendorDBAccessorGetAllLocationsCall) Return(arg0 []string, arg1 error) *MockvendorDBAccessorGetAllLocationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockvendorDBAccessorGetAllLocationsCall) Do(f func(context.Context) ([]string, error)) *MockvendorDBAccessorGetAllLocationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockvendorDBAccessorGetAllLocationsCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockvendorDBAccessorGetAllLocationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetById mocks base method.
func (m *MockvendorDBAccessor) GetById(ctx context.Context, id string) (*Vendor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*Vendor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockvendorDBAccessorMockRecorder) GetById(ctx, id any) *MockvendorDBAccessorGetByIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockvendorDBAccessor)(nil).GetById), ctx, id)
	return &MockvendorDBAccessorGetByIdCall{Call: call}
}

// MockvendorDBAccessorGetByIdCall wrap *gomock.Call
type MockvendorDBAccessorGetByIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockvendorDBAccessorGetByIdCall) Return(arg0 *Vendor, arg1 error) *MockvendorDBAccessorGetByIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockvendorDBAccessorGetByIdCall) Do(f func(context.Context, string) (*Vendor, error)) *MockvendorDBAccessorGetByIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockvendorDBAccessorGetByIdCall) DoAndReturn(f func(context.Context, string) (*Vendor, error)) *MockvendorDBAccessorGetByIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSomeStuff mocks base method.
func (m *MockvendorDBAccessor) GetSomeStuff(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSomeStuff", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSomeStuff indicates an expected call of GetSomeStuff.
func (mr *MockvendorDBAccessorMockRecorder) GetSomeStuff(ctx any) *MockvendorDBAccessorGetSomeStuffCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSomeStuff", reflect.TypeOf((*MockvendorDBAccessor)(nil).GetSomeStuff), ctx)
	return &MockvendorDBAccessorGetSomeStuffCall{Call: call}
}

// MockvendorDBAccessorGetSomeStuffCall wrap *gomock.Call
type MockvendorDBAccessorGetSomeStuffCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockvendorDBAccessorGetSomeStuffCall) Return(arg0 []string, arg1 error) *MockvendorDBAccessorGetSomeStuffCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockvendorDBAccessorGetSomeStuffCall) Do(f func(context.Context) ([]string, error)) *MockvendorDBAccessorGetSomeStuffCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockvendorDBAccessorGetSomeStuffCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockvendorDBAccessorGetSomeStuffCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateDetail mocks base method.
func (m *MockvendorDBAccessor) UpdateDetail(ctx context.Context, spec Vendor) (*Vendor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDetail", ctx, spec)
	ret0, _ := ret[0].(*Vendor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDetail indicates an expected call of UpdateDetail.
func (mr *MockvendorDBAccessorMockRecorder) UpdateDetail(ctx, spec any) *MockvendorDBAccessorUpdateDetailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDetail", reflect.TypeOf((*MockvendorDBAccessor)(nil).UpdateDetail), ctx, spec)
	return &MockvendorDBAccessorUpdateDetailCall{Call: call}
}

// MockvendorDBAccessorUpdateDetailCall wrap *gomock.Call
type MockvendorDBAccessorUpdateDetailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockvendorDBAccessorUpdateDetailCall) Return(arg0 *Vendor, arg1 error) *MockvendorDBAccessorUpdateDetailCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockvendorDBAccessorUpdateDetailCall) Do(f func(context.Context, Vendor) (*Vendor, error)) *MockvendorDBAccessorUpdateDetailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockvendorDBAccessorUpdateDetailCall) DoAndReturn(f func(context.Context, Vendor) (*Vendor, error)) *MockvendorDBAccessorUpdateDetailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockemailStatusSvc is a mock of emailStatusSvc interface.
type MockemailStatusSvc struct {
	ctrl     *gomock.Controller
	recorder *MockemailStatusSvcMockRecorder
}

// MockemailStatusSvcMockRecorder is the mock recorder for MockemailStatusSvc.
type MockemailStatusSvcMockRecorder struct {
	mock *MockemailStatusSvc
}

// NewMockemailStatusSvc creates a new mock instance.
func NewMockemailStatusSvc(ctrl *gomock.Controller) *MockemailStatusSvc {
	mock := &MockemailStatusSvc{ctrl: ctrl}
	mock.recorder = &MockemailStatusSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockemailStatusSvc) EXPECT() *MockemailStatusSvcMockRecorder {
	return m.recorder
}

// GetAllEmailStatus mocks base method.
func (m *MockemailStatusSvc) GetAllEmailStatus(ctx context.Context, spec mailer.GetAllEmailStatusSpec) (*mailer.AccessorGetEmailStatusPaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEmailStatus", ctx, spec)
	ret0, _ := ret[0].(*mailer.AccessorGetEmailStatusPaginationData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEmailStatus indicates an expected call of GetAllEmailStatus.
func (mr *MockemailStatusSvcMockRecorder) GetAllEmailStatus(ctx, spec any) *MockemailStatusSvcGetAllEmailStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEmailStatus", reflect.TypeOf((*MockemailStatusSvc)(nil).GetAllEmailStatus), ctx, spec)
	return &MockemailStatusSvcGetAllEmailStatusCall{Call: call}
}

// MockemailStatusSvcGetAllEmailStatusCall wrap *gomock.Call
type MockemailStatusSvcGetAllEmailStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockemailStatusSvcGetAllEmailStatusCall) Return(arg0 *mailer.AccessorGetEmailStatusPaginationData, arg1 error) *MockemailStatusSvcGetAllEmailStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockemailStatusSvcGetAllEmailStatusCall) Do(f func(context.Context, mailer.GetAllEmailStatusSpec) (*mailer.AccessorGetEmailStatusPaginationData, error)) *MockemailStatusSvcGetAllEmailStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockemailStatusSvcGetAllEmailStatusCall) DoAndReturn(f func(context.Context, mailer.GetAllEmailStatusSpec) (*mailer.AccessorGetEmailStatusPaginationData, error)) *MockemailStatusSvcGetAllEmailStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WriteEmailStatus mocks base method.
func (m *MockemailStatusSvc) WriteEmailStatus(ctx context.Context, status mailer.EmailStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteEmailStatus", ctx, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteEmailStatus indicates an expected call of WriteEmailStatus.
func (mr *MockemailStatusSvcMockRecorder) WriteEmailStatus(ctx, status any) *MockemailStatusSvcWriteEmailStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteEmailStatus", reflect.TypeOf((*MockemailStatusSvc)(nil).WriteEmailStatus), ctx, status)
	return &MockemailStatusSvcWriteEmailStatusCall{Call: call}
}

// MockemailStatusSvcWriteEmailStatusCall wrap *gomock.Call
type MockemailStatusSvcWriteEmailStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockemailStatusSvcWriteEmailStatusCall) Return(arg0 error) *MockemailStatusSvcWriteEmailStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockemailStatusSvcWriteEmailStatusCall) Do(f func(context.Context, mailer.EmailStatus) error) *MockemailStatusSvcWriteEmailStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockemailStatusSvcWriteEmailStatusCall) DoAndReturn(f func(context.Context, mailer.EmailStatus) error) *MockemailStatusSvcWriteEmailStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
