// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -typed -source=service.go -destination=service_mock.go -package=token
//

// Package token is a generated GoMock package.
package token

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MocktokenManager is a mock of tokenManager interface.
type MocktokenManager struct {
	ctrl     *gomock.Controller
	recorder *MocktokenManagerMockRecorder
}

// MocktokenManagerMockRecorder is the mock recorder for MocktokenManager.
type MocktokenManagerMockRecorder struct {
	mock *MocktokenManager
}

// NewMocktokenManager creates a new mock instance.
func NewMocktokenManager(ctrl *gomock.Controller) *MocktokenManager {
	mock := &MocktokenManager{ctrl: ctrl}
	mock.recorder = &MocktokenManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktokenManager) EXPECT() *MocktokenManagerMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MocktokenManager) GenerateToken(spec ClaimSpec) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", spec)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MocktokenManagerMockRecorder) GenerateToken(spec any) *MocktokenManagerGenerateTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MocktokenManager)(nil).GenerateToken), spec)
	return &MocktokenManagerGenerateTokenCall{Call: call}
}

// MocktokenManagerGenerateTokenCall wrap *gomock.Call
type MocktokenManagerGenerateTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocktokenManagerGenerateTokenCall) Return(arg0 string, arg1 error) *MocktokenManagerGenerateTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocktokenManagerGenerateTokenCall) Do(f func(ClaimSpec) (string, error)) *MocktokenManagerGenerateTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocktokenManagerGenerateTokenCall) DoAndReturn(f func(ClaimSpec) (string, error)) *MocktokenManagerGenerateTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ValidateToken mocks base method.
func (m *MocktokenManager) ValidateToken(tokenString string) (*Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", tokenString)
	ret0, _ := ret[0].(*Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MocktokenManagerMockRecorder) ValidateToken(tokenString any) *MocktokenManagerValidateTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MocktokenManager)(nil).ValidateToken), tokenString)
	return &MocktokenManagerValidateTokenCall{Call: call}
}

// MocktokenManagerValidateTokenCall wrap *gomock.Call
type MocktokenManagerValidateTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocktokenManagerValidateTokenCall) Return(arg0 *Claims, arg1 error) *MocktokenManagerValidateTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocktokenManagerValidateTokenCall) Do(f func(string) (*Claims, error)) *MocktokenManagerValidateTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocktokenManagerValidateTokenCall) DoAndReturn(f func(string) (*Claims, error)) *MocktokenManagerValidateTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
