// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -typed -source=service.go -destination=service_mock.go -package=account
//

// Package account is a generated GoMock package.
package account

import (
	context "context"
	token "kg/procurement/internal/token"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockaccountDBAccessor is a mock of accountDBAccessor interface.
type MockaccountDBAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockaccountDBAccessorMockRecorder
}

// MockaccountDBAccessorMockRecorder is the mock recorder for MockaccountDBAccessor.
type MockaccountDBAccessorMockRecorder struct {
	mock *MockaccountDBAccessor
}

// NewMockaccountDBAccessor creates a new mock instance.
func NewMockaccountDBAccessor(ctrl *gomock.Controller) *MockaccountDBAccessor {
	mock := &MockaccountDBAccessor{ctrl: ctrl}
	mock.recorder = &MockaccountDBAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockaccountDBAccessor) EXPECT() *MockaccountDBAccessorMockRecorder {
	return m.recorder
}

// FindAccountByEmail mocks base method.
func (m *MockaccountDBAccessor) FindAccountByEmail(ctx context.Context, email string) (*Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAccountByEmail", ctx, email)
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAccountByEmail indicates an expected call of FindAccountByEmail.
func (mr *MockaccountDBAccessorMockRecorder) FindAccountByEmail(ctx, email any) *MockaccountDBAccessorFindAccountByEmailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAccountByEmail", reflect.TypeOf((*MockaccountDBAccessor)(nil).FindAccountByEmail), ctx, email)
	return &MockaccountDBAccessorFindAccountByEmailCall{Call: call}
}

// MockaccountDBAccessorFindAccountByEmailCall wrap *gomock.Call
type MockaccountDBAccessorFindAccountByEmailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockaccountDBAccessorFindAccountByEmailCall) Return(arg0 *Account, arg1 error) *MockaccountDBAccessorFindAccountByEmailCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockaccountDBAccessorFindAccountByEmailCall) Do(f func(context.Context, string) (*Account, error)) *MockaccountDBAccessorFindAccountByEmailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockaccountDBAccessorFindAccountByEmailCall) DoAndReturn(f func(context.Context, string) (*Account, error)) *MockaccountDBAccessorFindAccountByEmailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindAccountByID mocks base method.
func (m *MockaccountDBAccessor) FindAccountByID(ctx context.Context, id string) (*Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAccountByID", ctx, id)
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAccountByID indicates an expected call of FindAccountByID.
func (mr *MockaccountDBAccessorMockRecorder) FindAccountByID(ctx, id any) *MockaccountDBAccessorFindAccountByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAccountByID", reflect.TypeOf((*MockaccountDBAccessor)(nil).FindAccountByID), ctx, id)
	return &MockaccountDBAccessorFindAccountByIDCall{Call: call}
}

// MockaccountDBAccessorFindAccountByIDCall wrap *gomock.Call
type MockaccountDBAccessorFindAccountByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockaccountDBAccessorFindAccountByIDCall) Return(arg0 *Account, arg1 error) *MockaccountDBAccessorFindAccountByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockaccountDBAccessorFindAccountByIDCall) Do(f func(context.Context, string) (*Account, error)) *MockaccountDBAccessorFindAccountByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockaccountDBAccessorFindAccountByIDCall) DoAndReturn(f func(context.Context, string) (*Account, error)) *MockaccountDBAccessorFindAccountByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RegisterAccount mocks base method.
func (m *MockaccountDBAccessor) RegisterAccount(ctx context.Context, account Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAccount", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAccount indicates an expected call of RegisterAccount.
func (mr *MockaccountDBAccessorMockRecorder) RegisterAccount(ctx, account any) *MockaccountDBAccessorRegisterAccountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAccount", reflect.TypeOf((*MockaccountDBAccessor)(nil).RegisterAccount), ctx, account)
	return &MockaccountDBAccessorRegisterAccountCall{Call: call}
}

// MockaccountDBAccessorRegisterAccountCall wrap *gomock.Call
type MockaccountDBAccessorRegisterAccountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockaccountDBAccessorRegisterAccountCall) Return(arg0 error) *MockaccountDBAccessorRegisterAccountCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockaccountDBAccessorRegisterAccountCall) Do(f func(context.Context, Account) error) *MockaccountDBAccessorRegisterAccountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockaccountDBAccessorRegisterAccountCall) DoAndReturn(f func(context.Context, Account) error) *MockaccountDBAccessorRegisterAccountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MocktokenService is a mock of tokenService interface.
type MocktokenService struct {
	ctrl     *gomock.Controller
	recorder *MocktokenServiceMockRecorder
}

// MocktokenServiceMockRecorder is the mock recorder for MocktokenService.
type MocktokenServiceMockRecorder struct {
	mock *MocktokenService
}

// NewMocktokenService creates a new mock instance.
func NewMocktokenService(ctrl *gomock.Controller) *MocktokenService {
	mock := &MocktokenService{ctrl: ctrl}
	mock.recorder = &MocktokenServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktokenService) EXPECT() *MocktokenServiceMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MocktokenService) GenerateToken(spec token.ClaimSpec) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", spec)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MocktokenServiceMockRecorder) GenerateToken(spec any) *MocktokenServiceGenerateTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MocktokenService)(nil).GenerateToken), spec)
	return &MocktokenServiceGenerateTokenCall{Call: call}
}

// MocktokenServiceGenerateTokenCall wrap *gomock.Call
type MocktokenServiceGenerateTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocktokenServiceGenerateTokenCall) Return(arg0 string, arg1 error) *MocktokenServiceGenerateTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocktokenServiceGenerateTokenCall) Do(f func(token.ClaimSpec) (string, error)) *MocktokenServiceGenerateTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocktokenServiceGenerateTokenCall) DoAndReturn(f func(token.ClaimSpec) (string, error)) *MocktokenServiceGenerateTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ValidateToken mocks base method.
func (m *MocktokenService) ValidateToken(tokenString string) (*token.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", tokenString)
	ret0, _ := ret[0].(*token.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MocktokenServiceMockRecorder) ValidateToken(tokenString any) *MocktokenServiceValidateTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MocktokenService)(nil).ValidateToken), tokenString)
	return &MocktokenServiceValidateTokenCall{Call: call}
}

// MocktokenServiceValidateTokenCall wrap *gomock.Call
type MocktokenServiceValidateTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocktokenServiceValidateTokenCall) Return(arg0 *token.Claims, arg1 error) *MocktokenServiceValidateTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocktokenServiceValidateTokenCall) Do(f func(string) (*token.Claims, error)) *MocktokenServiceValidateTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocktokenServiceValidateTokenCall) DoAndReturn(f func(string) (*token.Claims, error)) *MocktokenServiceValidateTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
