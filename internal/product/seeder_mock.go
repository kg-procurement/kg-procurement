// Code generated by MockGen. DO NOT EDIT.
// Source: seeder.go
//
// Generated by this command:
//
//	mockgen -typed -source=seeder.go -destination=seeder_mock.go -package=product
//

// Package product is a generated GoMock package.
package product

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockseederDataWriter is a mock of seederDataWriter interface.
type MockseederDataWriter struct {
	ctrl     *gomock.Controller
	recorder *MockseederDataWriterMockRecorder
}

// MockseederDataWriterMockRecorder is the mock recorder for MockseederDataWriter.
type MockseederDataWriterMockRecorder struct {
	mock *MockseederDataWriter
}

// NewMockseederDataWriter creates a new mock instance.
func NewMockseederDataWriter(ctrl *gomock.Controller) *MockseederDataWriter {
	mock := &MockseederDataWriter{ctrl: ctrl}
	mock.recorder = &MockseederDataWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockseederDataWriter) EXPECT() *MockseederDataWriterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockseederDataWriter) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockseederDataWriterMockRecorder) Close() *MockseederDataWriterCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockseederDataWriter)(nil).Close))
	return &MockseederDataWriterCloseCall{Call: call}
}

// MockseederDataWriterCloseCall wrap *gomock.Call
type MockseederDataWriterCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockseederDataWriterCloseCall) Return(arg0 error) *MockseederDataWriterCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockseederDataWriterCloseCall) Do(f func() error) *MockseederDataWriterCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockseederDataWriterCloseCall) DoAndReturn(f func() error) *MockseederDataWriterCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// writeProduct mocks base method.
func (m *MockseederDataWriter) writeProduct(ctx context.Context, product Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "writeProduct", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// writeProduct indicates an expected call of writeProduct.
func (mr *MockseederDataWriterMockRecorder) writeProduct(ctx, product any) *MockseederDataWriterwriteProductCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "writeProduct", reflect.TypeOf((*MockseederDataWriter)(nil).writeProduct), ctx, product)
	return &MockseederDataWriterwriteProductCall{Call: call}
}

// MockseederDataWriterwriteProductCall wrap *gomock.Call
type MockseederDataWriterwriteProductCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockseederDataWriterwriteProductCall) Return(arg0 error) *MockseederDataWriterwriteProductCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockseederDataWriterwriteProductCall) Do(f func(context.Context, Product) error) *MockseederDataWriterwriteProductCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockseederDataWriterwriteProductCall) DoAndReturn(f func(context.Context, Product) error) *MockseederDataWriterwriteProductCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// writeProductCategory mocks base method.
func (m *MockseederDataWriter) writeProductCategory(ctx context.Context, productCategory ProductCategory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "writeProductCategory", ctx, productCategory)
	ret0, _ := ret[0].(error)
	return ret0
}

// writeProductCategory indicates an expected call of writeProductCategory.
func (mr *MockseederDataWriterMockRecorder) writeProductCategory(ctx, productCategory any) *MockseederDataWriterwriteProductCategoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "writeProductCategory", reflect.TypeOf((*MockseederDataWriter)(nil).writeProductCategory), ctx, productCategory)
	return &MockseederDataWriterwriteProductCategoryCall{Call: call}
}

// MockseederDataWriterwriteProductCategoryCall wrap *gomock.Call
type MockseederDataWriterwriteProductCategoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockseederDataWriterwriteProductCategoryCall) Return(arg0 error) *MockseederDataWriterwriteProductCategoryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockseederDataWriterwriteProductCategoryCall) Do(f func(context.Context, ProductCategory) error) *MockseederDataWriterwriteProductCategoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockseederDataWriterwriteProductCategoryCall) DoAndReturn(f func(context.Context, ProductCategory) error) *MockseederDataWriterwriteProductCategoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// writeProductType mocks base method.
func (m *MockseederDataWriter) writeProductType(ctx context.Context, productType ProductType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "writeProductType", ctx, productType)
	ret0, _ := ret[0].(error)
	return ret0
}

// writeProductType indicates an expected call of writeProductType.
func (mr *MockseederDataWriterMockRecorder) writeProductType(ctx, productType any) *MockseederDataWriterwriteProductTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "writeProductType", reflect.TypeOf((*MockseederDataWriter)(nil).writeProductType), ctx, productType)
	return &MockseederDataWriterwriteProductTypeCall{Call: call}
}

// MockseederDataWriterwriteProductTypeCall wrap *gomock.Call
type MockseederDataWriterwriteProductTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockseederDataWriterwriteProductTypeCall) Return(arg0 error) *MockseederDataWriterwriteProductTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockseederDataWriterwriteProductTypeCall) Do(f func(context.Context, ProductType) error) *MockseederDataWriterwriteProductTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockseederDataWriterwriteProductTypeCall) DoAndReturn(f func(context.Context, ProductType) error) *MockseederDataWriterwriteProductTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// writeUOM mocks base method.
func (m *MockseederDataWriter) writeUOM(ctx context.Context, uom UOM) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "writeUOM", ctx, uom)
	ret0, _ := ret[0].(error)
	return ret0
}

// writeUOM indicates an expected call of writeUOM.
func (mr *MockseederDataWriterMockRecorder) writeUOM(ctx, uom any) *MockseederDataWriterwriteUOMCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "writeUOM", reflect.TypeOf((*MockseederDataWriter)(nil).writeUOM), ctx, uom)
	return &MockseederDataWriterwriteUOMCall{Call: call}
}

// MockseederDataWriterwriteUOMCall wrap *gomock.Call
type MockseederDataWriterwriteUOMCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockseederDataWriterwriteUOMCall) Return(arg0 error) *MockseederDataWriterwriteUOMCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockseederDataWriterwriteUOMCall) Do(f func(context.Context, UOM) error) *MockseederDataWriterwriteUOMCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockseederDataWriterwriteUOMCall) DoAndReturn(f func(context.Context, UOM) error) *MockseederDataWriterwriteUOMCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
