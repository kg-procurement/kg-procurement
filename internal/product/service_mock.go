// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -typed -source=service.go -destination=service_mock.go -package=product
//

// Package product is a generated GoMock package.
package product

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockproductDBAccessor is a mock of productDBAccessor interface.
type MockproductDBAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockproductDBAccessorMockRecorder
}

// MockproductDBAccessorMockRecorder is the mock recorder for MockproductDBAccessor.
type MockproductDBAccessorMockRecorder struct {
	mock *MockproductDBAccessor
}

// NewMockproductDBAccessor creates a new mock instance.
func NewMockproductDBAccessor(ctrl *gomock.Controller) *MockproductDBAccessor {
	mock := &MockproductDBAccessor{ctrl: ctrl}
	mock.recorder = &MockproductDBAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproductDBAccessor) EXPECT() *MockproductDBAccessorMockRecorder {
	return m.recorder
}

// GetProductsByVendor mocks base method.
func (m *MockproductDBAccessor) GetProductsByVendor(ctx context.Context, spec GetProductsByVendorSpec) ([]Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByVendor", ctx, spec)
	ret0, _ := ret[0].([]Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByVendor indicates an expected call of GetProductsByVendor.
func (mr *MockproductDBAccessorMockRecorder) GetProductsByVendor(ctx, spec any) *MockproductDBAccessorGetProductsByVendorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByVendor", reflect.TypeOf((*MockproductDBAccessor)(nil).GetProductsByVendor), ctx, spec)
	return &MockproductDBAccessorGetProductsByVendorCall{Call: call}
}

// MockproductDBAccessorGetProductsByVendorCall wrap *gomock.Call
type MockproductDBAccessorGetProductsByVendorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockproductDBAccessorGetProductsByVendorCall) Return(arg0 []Product, arg1 error) *MockproductDBAccessorGetProductsByVendorCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockproductDBAccessorGetProductsByVendorCall) Do(f func(context.Context, GetProductsByVendorSpec) ([]Product, error)) *MockproductDBAccessorGetProductsByVendorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockproductDBAccessorGetProductsByVendorCall) DoAndReturn(f func(context.Context, GetProductsByVendorSpec) ([]Product, error)) *MockproductDBAccessorGetProductsByVendorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
