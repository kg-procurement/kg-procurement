// Code generated by MockGen. DO NOT EDIT.
// Source: gomail.go
//
// Generated by this command:
//
//	mockgen -typed -source=gomail.go -destination=gomail_mock.go -package=mailer
//

// Package mailer is a generated GoMock package.
package mailer

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gomail "gopkg.in/gomail.v2"
)

// MockDialer is a mock of Dialer interface.
type MockDialer struct {
	ctrl     *gomock.Controller
	recorder *MockDialerMockRecorder
	isgomock struct{}
}

// MockDialerMockRecorder is the mock recorder for MockDialer.
type MockDialerMockRecorder struct {
	mock *MockDialer
}

// NewMockDialer creates a new mock instance.
func NewMockDialer(ctrl *gomock.Controller) *MockDialer {
	mock := &MockDialer{ctrl: ctrl}
	mock.recorder = &MockDialerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDialer) EXPECT() *MockDialerMockRecorder {
	return m.recorder
}

// DialAndSend mocks base method.
func (m_2 *MockDialer) DialAndSend(m ...*gomail.Message) error {
	m_2.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range m {
		varargs = append(varargs, a)
	}
	ret := m_2.ctrl.Call(m_2, "DialAndSend", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DialAndSend indicates an expected call of DialAndSend.
func (mr *MockDialerMockRecorder) DialAndSend(m ...any) *MockDialerDialAndSendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialAndSend", reflect.TypeOf((*MockDialer)(nil).DialAndSend), m...)
	return &MockDialerDialAndSendCall{Call: call}
}

// MockDialerDialAndSendCall wrap *gomock.Call
type MockDialerDialAndSendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDialerDialAndSendCall) Return(arg0 error) *MockDialerDialAndSendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDialerDialAndSendCall) Do(f func(...*gomail.Message) error) *MockDialerDialAndSendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDialerDialAndSendCall) DoAndReturn(f func(...*gomail.Message) error) *MockDialerDialAndSendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
