// Code generated by MockGen. DO NOT EDIT.
// Source: postgres.go
//
// Generated by this command:
//
//	mockgen -typed -source=postgres.go -destination=postgres_mock.go -package=database
//

// Package database is a generated GoMock package.
package database

import (
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDBConnector is a mock of DBConnector interface.
type MockDBConnector struct {
	ctrl     *gomock.Controller
	recorder *MockDBConnectorMockRecorder
}

// MockDBConnectorMockRecorder is the mock recorder for MockDBConnector.
type MockDBConnectorMockRecorder struct {
	mock *MockDBConnector
}

// NewMockDBConnector creates a new mock instance.
func NewMockDBConnector(ctrl *gomock.Controller) *MockDBConnector {
	mock := &MockDBConnector{ctrl: ctrl}
	mock.recorder = &MockDBConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBConnector) EXPECT() *MockDBConnectorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDBConnector) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDBConnectorMockRecorder) Close() *MockDBConnectorCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDBConnector)(nil).Close))
	return &MockDBConnectorCloseCall{Call: call}
}

// MockDBConnectorCloseCall wrap *gomock.Call
type MockDBConnectorCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBConnectorCloseCall) Return(arg0 error) *MockDBConnectorCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBConnectorCloseCall) Do(f func() error) *MockDBConnectorCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBConnectorCloseCall) DoAndReturn(f func() error) *MockDBConnectorCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Exec mocks base method.
func (m *MockDBConnector) Exec(query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockDBConnectorMockRecorder) Exec(query any, args ...any) *MockDBConnectorExecCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDBConnector)(nil).Exec), varargs...)
	return &MockDBConnectorExecCall{Call: call}
}

// MockDBConnectorExecCall wrap *gomock.Call
type MockDBConnectorExecCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBConnectorExecCall) Return(arg0 sql.Result, arg1 error) *MockDBConnectorExecCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBConnectorExecCall) Do(f func(string, ...any) (sql.Result, error)) *MockDBConnectorExecCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBConnectorExecCall) DoAndReturn(f func(string, ...any) (sql.Result, error)) *MockDBConnectorExecCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Query mocks base method.
func (m *MockDBConnector) Query(query string, args ...any) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockDBConnectorMockRecorder) Query(query any, args ...any) *MockDBConnectorQueryCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDBConnector)(nil).Query), varargs...)
	return &MockDBConnectorQueryCall{Call: call}
}

// MockDBConnectorQueryCall wrap *gomock.Call
type MockDBConnectorQueryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBConnectorQueryCall) Return(arg0 *sql.Rows, arg1 error) *MockDBConnectorQueryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBConnectorQueryCall) Do(f func(string, ...any) (*sql.Rows, error)) *MockDBConnectorQueryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBConnectorQueryCall) DoAndReturn(f func(string, ...any) (*sql.Rows, error)) *MockDBConnectorQueryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// QueryRow mocks base method.
func (m *MockDBConnector) QueryRow(query string, args ...any) *sql.Row {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockDBConnectorMockRecorder) QueryRow(query any, args ...any) *MockDBConnectorQueryRowCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockDBConnector)(nil).QueryRow), varargs...)
	return &MockDBConnectorQueryRowCall{Call: call}
}

// MockDBConnectorQueryRowCall wrap *gomock.Call
type MockDBConnectorQueryRowCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBConnectorQueryRowCall) Return(arg0 *sql.Row) *MockDBConnectorQueryRowCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBConnectorQueryRowCall) Do(f func(string, ...any) *sql.Row) *MockDBConnectorQueryRowCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBConnectorQueryRowCall) DoAndReturn(f func(string, ...any) *sql.Row) *MockDBConnectorQueryRowCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
