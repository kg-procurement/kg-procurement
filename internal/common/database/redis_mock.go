// Code generated by MockGen. DO NOT EDIT.
// Source: redis.go
//
// Generated by this command:
//
//	mockgen -typed -source=redis.go -destination=redis_mock.go -package=database
//

// Package database is a generated GoMock package.
package database

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRedisClientInterface is a mock of RedisClientInterface interface.
type MockRedisClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRedisClientInterfaceMockRecorder
}

// MockRedisClientInterfaceMockRecorder is the mock recorder for MockRedisClientInterface.
type MockRedisClientInterfaceMockRecorder struct {
	mock *MockRedisClientInterface
}

// NewMockRedisClientInterface creates a new mock instance.
func NewMockRedisClientInterface(ctrl *gomock.Controller) *MockRedisClientInterface {
	mock := &MockRedisClientInterface{ctrl: ctrl}
	mock.recorder = &MockRedisClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisClientInterface) EXPECT() *MockRedisClientInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRedisClientInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRedisClientInterfaceMockRecorder) Close() *MockRedisClientInterfaceCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRedisClientInterface)(nil).Close))
	return &MockRedisClientInterfaceCloseCall{Call: call}
}

// MockRedisClientInterfaceCloseCall wrap *gomock.Call
type MockRedisClientInterfaceCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRedisClientInterfaceCloseCall) Return(arg0 error) *MockRedisClientInterfaceCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRedisClientInterfaceCloseCall) Do(f func() error) *MockRedisClientInterfaceCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRedisClientInterfaceCloseCall) DoAndReturn(f func() error) *MockRedisClientInterfaceCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockRedisClientInterface) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRedisClientInterfaceMockRecorder) Delete(ctx, key any) *MockRedisClientInterfaceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRedisClientInterface)(nil).Delete), ctx, key)
	return &MockRedisClientInterfaceDeleteCall{Call: call}
}

// MockRedisClientInterfaceDeleteCall wrap *gomock.Call
type MockRedisClientInterfaceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRedisClientInterfaceDeleteCall) Return(arg0 error) *MockRedisClientInterfaceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRedisClientInterfaceDeleteCall) Do(f func(context.Context, string) error) *MockRedisClientInterfaceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRedisClientInterfaceDeleteCall) DoAndReturn(f func(context.Context, string) error) *MockRedisClientInterfaceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockRedisClientInterface) Get(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRedisClientInterfaceMockRecorder) Get(ctx, key any) *MockRedisClientInterfaceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRedisClientInterface)(nil).Get), ctx, key)
	return &MockRedisClientInterfaceGetCall{Call: call}
}

// MockRedisClientInterfaceGetCall wrap *gomock.Call
type MockRedisClientInterfaceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRedisClientInterfaceGetCall) Return(arg0 string, arg1 error) *MockRedisClientInterfaceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRedisClientInterfaceGetCall) Do(f func(context.Context, string) (string, error)) *MockRedisClientInterfaceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRedisClientInterfaceGetCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockRedisClientInterfaceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Set mocks base method.
func (m *MockRedisClientInterface) Set(ctx context.Context, key string, value any, expiration int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRedisClientInterfaceMockRecorder) Set(ctx, key, value, expiration any) *MockRedisClientInterfaceSetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRedisClientInterface)(nil).Set), ctx, key, value, expiration)
	return &MockRedisClientInterfaceSetCall{Call: call}
}

// MockRedisClientInterfaceSetCall wrap *gomock.Call
type MockRedisClientInterfaceSetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRedisClientInterfaceSetCall) Return(arg0 error) *MockRedisClientInterfaceSetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRedisClientInterfaceSetCall) Do(f func(context.Context, string, any, int) error) *MockRedisClientInterfaceSetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRedisClientInterfaceSetCall) DoAndReturn(f func(context.Context, string, any, int) error) *MockRedisClientInterfaceSetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
